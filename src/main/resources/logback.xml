<?xml version="1.0" encoding="UTF-8"?>
<!--官方文档
    https://logback.qos.ch/manual/configuration.html
 -->

<!--
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true">
    <!--<include resource="org/springframework/boot/logging/logback/defaults.xml" />-->
    <!--
        <springProperty scope="context" name="logging.home" source="logging.home"/>
        <springProperty scope="context" name="spring.application.name" source="spring.application.name"/>
    -->

    <!--
        日志输出格式：
        %d表示日期时间，
        %thread表示线程名，
        %-5level：级别从左显示5个字符宽度
        %logger{50} 表示logger名字最长50个字符，否则按照句点分割。
        %msg：日志消息，
        %n是换行符
    -->
    <!--
    <property name="logPattern" value="%date{yyyy-MM-dd HH:mm:ss}||%-5level||${HOSTNAME}||${spring.application.name}||00||00||%logger{36}||%msg%n"/>
    -->
    <property name="logPattern" value="%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} : %msg%n"/>
    <property name="logCharset" value="UTF-8"/>
    <property name="maxHistory" value="30"/>
    <property name="maxFileSize" value="5MB"/>
    <property name="totalSizeCap" value="500MB"/>
    <property name="logFilePrefix" value="logs"/>
    <property name="backFileSuffix" value="%d{yyyy-MM-dd}.%3i"/>

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${logCharset}</charset>
        </encoder>
    </appender>
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logFilePrefix}/_autotest.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logFilePrefix}/${backFileSuffix}.ant_forest.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <maxFileSize>${maxFileSize}</maxFileSize>
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${logCharset}</charset>
        </encoder>
    </appender>
    <!--
    <appender name="WEBDRIVER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logFilePrefix}/_webdriver.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logFilePrefix}/${backFileSuffix}.webdriver.log</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <maxFileSize>${maxFileSize}</maxFileSize>
            <totalSizeCap>${totalSizeCap}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>${logCharset}</charset>
        </encoder>
    </appender>
    -->

    <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
        name:用来指定受此logger约束的某一个包或者具体的某一个类。
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。
              如果未设置此属性，那么当前logger将会继承上级的级别。
        additivity:是否向上级logger传递打印信息。默认是true。
    -->
    <!--
    <logger name="org.openqa.selenium" level="DEBUG" additivity="false">
        <appender-ref ref="WEBDRIVER"/>
    </logger>
    -->
    <!--
        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性
        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        不能设置为INHERITED或者同义词NULL。默认是DEBUG
        可以包含零个或多个元素，标识这个appender将会添加到这个logger。
    -->
    <root level="info">
        <appender-ref ref="CONSOLE"></appender-ref>
        <appender-ref ref="FILE"></appender-ref>
    </root>
</configuration>  